[0.005s] Invoking command in '/home/huang/ros2/ROS2/coordinate_transformations/build/cpp_tf_turtle': CMAKE_PREFIX_PATH=/opt/ros/humble /usr/bin/cmake --build /home/huang/ros2/ROS2/coordinate_transformations/build/cpp_tf_turtle -- -j20 -l20
[0.018s] -- Found ament_cmake: 1.3.10 (/opt/ros/humble/share/ament_cmake/cmake)
[0.088s] -- Found rclcpp: 16.0.10 (/opt/ros/humble/share/rclcpp/cmake)
[0.142s] -- Found rosidl_generator_c: 3.1.5 (/opt/ros/humble/share/rosidl_generator_c/cmake)
[0.143s] -- Found rosidl_adapter: 3.1.5 (/opt/ros/humble/share/rosidl_adapter/cmake)
[0.148s] -- Found rosidl_generator_cpp: 3.1.5 (/opt/ros/humble/share/rosidl_generator_cpp/cmake)
[0.154s] -- Using all available rosidl_typesupport_c: rosidl_typesupport_fastrtps_c;rosidl_typesupport_introspection_c
[0.163s] -- Using all available rosidl_typesupport_cpp: rosidl_typesupport_fastrtps_cpp;rosidl_typesupport_introspection_cpp
[0.185s] -- Found rmw_implementation_cmake: 6.1.2 (/opt/ros/humble/share/rmw_implementation_cmake/cmake)
[0.186s] -- Found rmw_fastrtps_cpp: 6.2.7 (/opt/ros/humble/share/rmw_fastrtps_cpp/cmake)
[1.489s] -- Using RMW implementation 'rmw_fastrtps_cpp' as default
[1.526s] -- Found tf2: 0.25.8 (/opt/ros/humble/share/tf2/cmake)
[1.537s] -- Found tf2_ros: 0.25.8 (/opt/ros/humble/share/tf2_ros/cmake)
[1.590s] -- Found turtlesim: 1.4.2 (/opt/ros/humble/share/turtlesim/cmake)
[1.601s] -- Found ament_lint_auto: 0.12.11 (/opt/ros/humble/share/ament_lint_auto/cmake)
[1.637s] -- Added test 'cppcheck' to perform static code analysis on C / C++ code
[1.637s] -- Configured cppcheck include dirs: $<BUILD_INTERFACE:/home/huang/ros2/ROS2/coordinate_transformations/src/cpp_tf_turtle/include>
[1.637s] -- Configured cppcheck exclude dirs and/or files: 
[1.638s] -- Added test 'flake8' to check Python code syntax and style conventions
[1.638s] -- Added test 'lint_cmake' to check CMake code style
[1.638s] -- Added test 'pep257' to check Python code against some of the docstring style conventions in PEP 257
[1.639s] -- Added test 'uncrustify' to check C / C++ code style
[1.639s] -- Configured uncrustify additional arguments: 
[1.639s] -- Added test 'xmllint' to check XML markup files
[1.640s] -- Configuring done
[1.651s] -- Generating done
[1.652s] -- Build files have been written to: /home/huang/ros2/ROS2/coordinate_transformations/build/cpp_tf_turtle
[1.663s] [35m[1mConsolidate compiler generated dependencies of target exer_spawn[0m
[1.664s] [35m[1mConsolidate compiler generated dependencies of target exer_tf_broadcaster[0m
[1.664s] [35m[1mConsolidate compiler generated dependencies of target exer_tf_listener[0m
[1.671s] [ 33%] Built target exer_spawn
[1.671s] [ 66%] Built target exer_tf_listener
[1.671s] [ 83%] [32mBuilding CXX object CMakeFiles/exer_tf_broadcaster.dir/src/exer_tf_broadcaster.cpp.o[0m
[3.010s] In file included from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32[m[K,
[3.010s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29[m[K,
[3.010s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20[m[K,
[3.010s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25[m[K,
[3.010s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18[m[K,
[3.010s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20[m[K,
[3.010s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37[m[K,
[3.010s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25[m[K,
[3.010s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21[m[K,
[3.010s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155[m[K,
[3.010s]                  from [01m[K/home/huang/ros2/ROS2/coordinate_transformations/src/cpp_tf_turtle/src/exer_tf_broadcaster.cpp:6[m[K:
[3.011s] /opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (Exer_tf_broadcater::*(Exer_tf_broadcater*, std::_Placeholder<1>))(turtlesim::msg::Pose_<std::allocator<void> >&)>; MessageT = turtlesim::msg::Pose_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™:
[3.011s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (Exer_tf_broadcater::*(Exer_tf_broadcater*, std::_Placeholder<1>))(turtlesim::msg::Pose_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = turtlesim::msg::Pose_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[3.011s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (Exer_tf_broadcater::*(Exer_tf_broadcater*, std::_Placeholder<1>))(turtlesim::msg::Pose_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = turtlesim::msg::Pose_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[3.011s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (Exer_tf_broadcater::*(Exer_tf_broadcater*, std::_Placeholder<1>))(turtlesim::msg::Pose_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[3.011s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (Exer_tf_broadcater::*(Exer_tf_broadcater*, std::_Placeholder<1>))(turtlesim::msg::Pose_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[3.011s] [01m[K/home/huang/ros2/ROS2/coordinate_transformations/src/cpp_tf_turtle/src/exer_tf_broadcaster.cpp:27:40:[m[K   required from here
[3.011s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:[m[K [01;31m[Kerror: [m[Kno match for â€˜[01m[Koperator=[m[Kâ€™ (operand types are â€˜[01m[Krclcpp::detail::AnySubscriptionCallbackHelper<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void>, false>::variant_type[m[Kâ€™ {aka â€˜[01m[Kstd::variant<std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&)>, std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >[m[Kâ€™} and â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<turtlesim::msg::Pose_<std::allocator<void> >, std::_Bind<void (Exer_tf_broadcater::*(Exer_tf_broadcater*, std::_Placeholder<1>))(turtlesim::msg::Pose_<std::allocator<void> >&)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(turtlesim::msg::Pose_<std::allocator<void> >&)>[m[Kâ€™})
[3.011s]   394 |       [01;31m[Kcallback_variant_ = static_cast<typename scbth::callback_type>(callback)[m[K;
[3.011s]       |       [01;31m[K~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[3.011s] In file included from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:28[m[K,
[3.011s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:24[m[K,
[3.011s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20[m[K,
[3.012s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25[m[K,
[3.012s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18[m[K,
[3.012s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20[m[K,
[3.012s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37[m[K,
[3.012s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25[m[K,
[3.012s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21[m[K,
[3.012s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155[m[K,
[3.012s]                  from [01m[K/home/huang/ros2/ROS2/coordinate_transformations/src/cpp_tf_turtle/src/exer_tf_broadcaster.cpp:6[m[K:
[3.012s] [01m[K/usr/include/c++/11/variant:1461:9:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Tp = _Tp; _Types = {std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&)>, std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
[3.012s]  1461 |         [01;36m[Koperator[m[K=(_Tp&& __rhs)
[3.012s]       |         [01;36m[K^~~~~~~~[m[K
[3.012s] [01m[K/usr/include/c++/11/variant:1461:9:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[3.012s] /usr/include/c++/11/variant: In substitution of â€˜[01m[Ktemplate<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::function<void(turtlesim::msg::Pose_<std::allocator<void> >&)>&&; <template-parameter-2-2> = void; _Types = {std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&)>, std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™:
[3.012s] [01m[K/usr/include/c++/11/variant:1457:14:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&)>, std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&)>, std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&)>, std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&)>, std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&> std::variant<std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&)>, std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::operator=<_Tp>(_Tp&&) [with _Tp = std::function<void(turtlesim::msg::Pose_<std::allocator<void> >&)>][m[Kâ€™
[3.013s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:[m[K   required from â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (Exer_tf_broadcater::*(Exer_tf_broadcater*, std::_Placeholder<1>))(turtlesim::msg::Pose_<std::allocator<void> >&)>; MessageT = turtlesim::msg::Pose_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™
[3.013s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (Exer_tf_broadcater::*(Exer_tf_broadcater*, std::_Placeholder<1>))(turtlesim::msg::Pose_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = turtlesim::msg::Pose_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[3.013s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (Exer_tf_broadcater::*(Exer_tf_broadcater*, std::_Placeholder<1>))(turtlesim::msg::Pose_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = turtlesim::msg::Pose_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[3.013s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (Exer_tf_broadcater::*(Exer_tf_broadcater*, std::_Placeholder<1>))(turtlesim::msg::Pose_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[3.013s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (Exer_tf_broadcater::*(Exer_tf_broadcater*, std::_Placeholder<1>))(turtlesim::msg::Pose_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[3.013s] [01m[K/home/huang/ros2/ROS2/coordinate_transformations/src/cpp_tf_turtle/src/exer_tf_broadcaster.cpp:27:40:[m[K   required from here
[3.013s] [01m[K/usr/include/c++/11/variant:1375:15:[m[K [01;31m[Kerror: [m[Kno type named â€˜[01m[Ktype[m[Kâ€™ in â€˜[01m[Kstruct std::enable_if<false, void>[m[Kâ€™
[3.013s]  1375 |         using [01;31m[K__accepted_type[m[K = __to_type<__accepted_index<_Tp>>;
[3.013s]       |               [01;31m[K^~~~~~~~~~~~~~~[m[K
[3.013s] /opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (Exer_tf_broadcater::*(Exer_tf_broadcater*, std::_Placeholder<1>))(turtlesim::msg::Pose_<std::allocator<void> >&)>; MessageT = turtlesim::msg::Pose_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™:
[3.013s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (Exer_tf_broadcater::*(Exer_tf_broadcater*, std::_Placeholder<1>))(turtlesim::msg::Pose_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = turtlesim::msg::Pose_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[3.013s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (Exer_tf_broadcater::*(Exer_tf_broadcater*, std::_Placeholder<1>))(turtlesim::msg::Pose_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = turtlesim::msg::Pose_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[3.013s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (Exer_tf_broadcater::*(Exer_tf_broadcater*, std::_Placeholder<1>))(turtlesim::msg::Pose_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[3.013s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (Exer_tf_broadcater::*(Exer_tf_broadcater*, std::_Placeholder<1>))(turtlesim::msg::Pose_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[3.013s] [01m[K/home/huang/ros2/ROS2/coordinate_transformations/src/cpp_tf_turtle/src/exer_tf_broadcaster.cpp:27:40:[m[K   required from here
[3.013s] [01m[K/usr/include/c++/11/variant:1398:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&)>, std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
[3.013s]  1398 |       variant& [01;36m[Koperator[m[K=(const variant&) = default;
[3.013s]       |                [01;36m[K^~~~~~~~[m[K
[3.013s] [01m[K/usr/include/c++/11/variant:1398:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<turtlesim::msg::Pose_<std::allocator<void> >, std::_Bind<void (Exer_tf_broadcater::*(Exer_tf_broadcater*, std::_Placeholder<1>))(turtlesim::msg::Pose_<std::allocator<void> >&)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(turtlesim::msg::Pose_<std::allocator<void> >&)>[m[Kâ€™} to â€˜[01m[Kconst std::variant<std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&)>, std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&[m[Kâ€™
[3.013s]  1398 |       variant& operator=([01;36m[Kconst variant&[m[K) = default;
[3.013s]       |                          [01;36m[K^~~~~~~~~~~~~~[m[K
[3.013s] [01m[K/usr/include/c++/11/variant:1399:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&)>, std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
[3.013s]  1399 |       variant& [01;36m[Koperator[m[K=(variant&&) = default;
[3.013s]       |                [01;36m[K^~~~~~~~[m[K
[3.013s] [01m[K/usr/include/c++/11/variant:1399:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<turtlesim::msg::Pose_<std::allocator<void> >, std::_Bind<void (Exer_tf_broadcater::*(Exer_tf_broadcater*, std::_Placeholder<1>))(turtlesim::msg::Pose_<std::allocator<void> >&)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(turtlesim::msg::Pose_<std::allocator<void> >&)>[m[Kâ€™} to â€˜[01m[Kstd::variant<std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&)>, std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&&[m[Kâ€™
[3.013s]  1399 |       variant& operator=([01;36m[Kvariant&&[m[K) = default;
[3.013s]       |                          [01;36m[K^~~~~~~~~[m[K
[3.094s] In file included from [01m[K/usr/include/x86_64-linux-gnu/c++/11/bits/c++allocator.h:33[m[K,
[3.094s]                  from [01m[K/usr/include/c++/11/bits/allocator.h:46[m[K,
[3.094s]                  from [01m[K/usr/include/c++/11/memory:64[m[K,
[3.094s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:153[m[K,
[3.094s]                  from [01m[K/home/huang/ros2/ROS2/coordinate_transformations/src/cpp_tf_turtle/src/exer_tf_broadcaster.cpp:6[m[K:
[3.094s] /usr/include/c++/11/ext/new_allocator.h: In instantiation of â€˜[01m[Kvoid __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with _Up = tf2_ros::TransformBroadcaster; _Args = {}; _Tp = tf2_ros::TransformBroadcaster][m[Kâ€™:
[3.095s] [01m[K/usr/include/c++/11/bits/alloc_traits.h:516:17:[m[K   required from â€˜[01m[Kstatic void std::allocator_traits<std::allocator<_Tp1> >::construct(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, _Up*, _Args&& ...) [with _Up = tf2_ros::TransformBroadcaster; _Args = {}; _Tp = tf2_ros::TransformBroadcaster; std::allocator_traits<std::allocator<_Tp1> >::allocator_type = std::allocator<tf2_ros::TransformBroadcaster>][m[Kâ€™
[3.095s] [01m[K/usr/include/c++/11/bits/shared_ptr_base.h:519:39:[m[K   required from â€˜[01m[Kstd::_Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp>::_Sp_counted_ptr_inplace(_Alloc, _Args&& ...) [with _Args = {}; _Tp = tf2_ros::TransformBroadcaster; _Alloc = std::allocator<tf2_ros::TransformBroadcaster>; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_atomic][m[Kâ€™
[3.095s] [01m[K/usr/include/c++/11/bits/shared_ptr_base.h:650:16:[m[K   required from â€˜[01m[Kstd::__shared_count<_Lp>::__shared_count(_Tp*&, std::_Sp_alloc_shared_tag<_Alloc>, _Args&& ...) [with _Tp = tf2_ros::TransformBroadcaster; _Alloc = std::allocator<tf2_ros::TransformBroadcaster>; _Args = {}; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_atomic][m[Kâ€™
[3.095s] [01m[K/usr/include/c++/11/bits/shared_ptr_base.h:1342:14:[m[K   required from â€˜[01m[Kstd::__shared_ptr<_Tp, _Lp>::__shared_ptr(std::_Sp_alloc_shared_tag<_Tp>, _Args&& ...) [with _Alloc = std::allocator<tf2_ros::TransformBroadcaster>; _Args = {}; _Tp = tf2_ros::TransformBroadcaster; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_atomic][m[Kâ€™
[3.095s] [01m[K/usr/include/c++/11/bits/shared_ptr.h:409:59:[m[K   required from â€˜[01m[Kstd::shared_ptr<_Tp>::shared_ptr(std::_Sp_alloc_shared_tag<_Tp>, _Args&& ...) [with _Alloc = std::allocator<tf2_ros::TransformBroadcaster>; _Args = {}; _Tp = tf2_ros::TransformBroadcaster][m[Kâ€™
[3.095s] [01m[K/usr/include/c++/11/bits/shared_ptr.h:862:14:[m[K   required from â€˜[01m[Kstd::shared_ptr<_Tp> std::allocate_shared(const _Alloc&, _Args&& ...) [with _Tp = tf2_ros::TransformBroadcaster; _Alloc = std::allocator<tf2_ros::TransformBroadcaster>; _Args = {}][m[Kâ€™
[3.095s] [01m[K/usr/include/c++/11/bits/shared_ptr.h:878:39:[m[K   required from â€˜[01m[Kstd::shared_ptr<_Tp> std::make_shared(_Args&& ...) [with _Tp = tf2_ros::TransformBroadcaster; _Args = {}][m[Kâ€™
[3.095s] [01m[K/home/huang/ros2/ROS2/coordinate_transformations/src/cpp_tf_turtle/src/exer_tf_broadcaster.cpp:24:85:[m[K   required from here
[3.095s] [01m[K/usr/include/c++/11/ext/new_allocator.h:162:11:[m[K [01;31m[Kerror: [m[Kno matching function for call to â€˜[01m[Ktf2_ros::TransformBroadcaster::TransformBroadcaster()[m[Kâ€™
[3.095s]   162 |         { [01;31m[K::new((void *)__p) _Up(std::forward<_Args>(__args)...)[m[K; }
[3.095s]       |           [01;31m[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[3.095s] In file included from [01m[K/home/huang/ros2/ROS2/coordinate_transformations/src/cpp_tf_turtle/src/exer_tf_broadcaster.cpp:10[m[K:
[3.095s] [01m[K/opt/ros/humble/include/tf2_ros/tf2_ros/transform_broadcaster.h:58:3:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class NodeT, class AllocatorT> tf2_ros::TransformBroadcaster::TransformBroadcaster(NodeT&&, const rclcpp::QoS&, const rclcpp::PublisherOptionsWithAllocator<AllocatorT>&)[m[Kâ€™
[3.095s]    58 |   [01;36m[KTransformBroadcaster[m[K(
[3.095s]       |   [01;36m[K^~~~~~~~~~~~~~~~~~~~[m[K
[3.095s] [01m[K/opt/ros/humble/include/tf2_ros/tf2_ros/transform_broadcaster.h:58:3:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[3.095s] In file included from [01m[K/usr/include/x86_64-linux-gnu/c++/11/bits/c++allocator.h:33[m[K,
[3.095s]                  from [01m[K/usr/include/c++/11/bits/allocator.h:46[m[K,
[3.095s]                  from [01m[K/usr/include/c++/11/memory:64[m[K,
[3.095s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:153[m[K,
[3.095s]                  from [01m[K/home/huang/ros2/ROS2/coordinate_transformations/src/cpp_tf_turtle/src/exer_tf_broadcaster.cpp:6[m[K:
[3.095s] [01m[K/usr/include/c++/11/ext/new_allocator.h:162:11:[m[K [01;36m[Knote: [m[K  candidate expects 3 arguments, 0 provided
[3.095s]   162 |         { [01;36m[K::new((void *)__p) _Up(std::forward<_Args>(__args)...)[m[K; }
[3.095s]       |           [01;36m[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[3.095s] In file included from [01m[K/home/huang/ros2/ROS2/coordinate_transformations/src/cpp_tf_turtle/src/exer_tf_broadcaster.cpp:10[m[K:
[3.095s] [01m[K/opt/ros/humble/include/tf2_ros/tf2_ros/transform_broadcaster.h:53:7:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktf2_ros::TransformBroadcaster::TransformBroadcaster(const tf2_ros::TransformBroadcaster&)[m[Kâ€™
[3.095s]    53 | class [01;36m[KTransformBroadcaster[m[K
[3.095s]       |       [01;36m[K^~~~~~~~~~~~~~~~~~~~[m[K
[3.095s] [01m[K/opt/ros/humble/include/tf2_ros/tf2_ros/transform_broadcaster.h:53:7:[m[K [01;36m[Knote: [m[K  candidate expects 1 argument, 0 provided
[3.095s] [01m[K/opt/ros/humble/include/tf2_ros/tf2_ros/transform_broadcaster.h:53:7:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktf2_ros::TransformBroadcaster::TransformBroadcaster(tf2_ros::TransformBroadcaster&&)[m[Kâ€™
[3.095s] [01m[K/opt/ros/humble/include/tf2_ros/tf2_ros/transform_broadcaster.h:53:7:[m[K [01;36m[Knote: [m[K  candidate expects 1 argument, 0 provided
[4.004s] gmake[2]: *** [CMakeFiles/exer_tf_broadcaster.dir/build.make:76: CMakeFiles/exer_tf_broadcaster.dir/src/exer_tf_broadcaster.cpp.o] Error 1
[4.004s] gmake[1]: *** [CMakeFiles/Makefile2:167: CMakeFiles/exer_tf_broadcaster.dir/all] Error 2
[4.004s] gmake: *** [Makefile:146: all] Error 2
[4.006s] Invoked command in '/home/huang/ros2/ROS2/coordinate_transformations/build/cpp_tf_turtle' returned '2': CMAKE_PREFIX_PATH=/opt/ros/humble /usr/bin/cmake --build /home/huang/ros2/ROS2/coordinate_transformations/build/cpp_tf_turtle -- -j20 -l20
